
<%- include('../../views/partials/user/header') %>
<%- include('../../views/partials/user/profile-sidebar') %>

<style>
   .main-content {
    background-color: rgb(230, 244, 230);
    margin-left: 16.4%;
    padding: 40px 30px;
    margin-top: 0px;
    border-radius: 8px;
  }
  .order-container {
    margin: 2rem auto;
    max-width: 90%;
  }

  .order-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  margin-bottom: 1rem;
  background-color: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.order-row-left {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.details {
  flex: 1;
  margin-left: 1rem;
}

  .order-row .details {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
    margin-left: 1rem;
  }

  .order-row h5 {
    margin: 0;
    color: #333;
    font-size: 1rem;
  }

  .order-row p {
    margin: 0;
    font-size: 0.9rem;
    color: #555;
  }

  .priceDetails {
  flex: 1;
  margin-left: 1rem;
}



  .order-row .actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-end;
  }

  .order-row .status {
    font-weight: bold;
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    color: #fff;
  }
  .status {
  font-weight: bold;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  color: #fff;
}

  .status.Pending {
    background-color: #ffc107;
  }

  .status.Processing {
    background-color: #17a2b8;
  }

  .status.Shipped {
    background-color: #007bff;
  }

  .status.Delivered {
    background-color: #28a745;
  }

  .status.Cancelled {
    background-color: #dc3545;
  }

  .status.Returned {
    background-color: #6c757d;
  }
  div.priceDetails{
    margin-right: 25%;
  }
  @media (max-width: 768px) {
    .main-content {
      margin-left: 0;
      padding: 20px;
    }
  }
</style>

<div class="main-content">
  <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg" style="margin-left: 10%;">
    <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
      Home
      <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
    </a>
    <span class="stext-109 cl4">
      My Orders
    </span>
  </div>

  <h2 class="text-center mb-4">Order Management</h2>

  <div class="order-container">
    <% if (orders && orders.length > 0) { %>
      <% 
        // Group products by orderId
        const ordersGrouped = {};
        orders.forEach(order => {
          if (!ordersGrouped[order._id]) {
            ordersGrouped[order._id] = [];
          }
          ordersGrouped[order._id].push(order);
        });
      %>
      
      <% for (const orderId in ordersGrouped) { 
        const orderGroup = ordersGrouped[orderId]; 
        const order = orderGroup[0]; // Assuming all items have the same orderId
      %>
        <a href="/orderedProducts?parentAddressId=<%= order.parentAddressId %>&orderId=<%=order._id%>" style="text-decoration: none;">
        <div class="order-row">
        
          <!-- Left Side: Images -->
          <div class="order-row-left">
            <% orderGroup.forEach(product => { %>
              <img src="uploads/product-images/<%= product.productDetails.productImage[0] %>" alt="Product Image" style="width: 100px; height: auto; border-radius: 8px; margin-bottom: 10px;">
            <% }); %>
          </div>

          

          <!-- Right Side: Price, Status, and Actions -->
          <div class="order-row-left m-l-50">
            <% orderGroup.forEach(product => { %>
              <p><strong>Product Name:</strong> <%= product.productDetails.productName %></p>
              <p><strong>Price:</strong> ₹<%= product.orderItems.price %></p>
              <p><strong>Quantity:</strong> <%= product.orderItems.quantity %></p>
              <p><strong>Total:</strong><span class="text-primary"> ₹<%= product.orderItems.totalPrice %></span></p>
            <% }); %>
          </div>

          <!-- Middle: Order Info -->
          <div class="details">
            <h5>Order ID: <span class="text-primary"><%= order.orderId %></span></h5>
            <p><strong>finalAmount:</strong><span class="text-primary"><%= order.finalAmount %></span>
            <p><strong>Address Type:</strong>
              <% if(addressData){ %>
                <% addressData.forEach(address => { %>
                  <% if (address.address._id.toString() === order.parentAddressId.toString()) { %>
                    <%= address.address.addressType %>
                  <% } %>
                <% }); %>
              <% } else { %>
                <p>No Data Found</p>
              <% } %>
            </p>
            <p><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' }) %></p>
          </div>
          
          <div class="actions">
            <p><strong>Status :&nbsp;</strong><span class="status <%= order.status %>"><%= order.status %></span></p>
            <button class="btn btn-danger btn-sm return-order" data-order-id="<%= order._id %>" data-order-quantity="<%= order.orderItems.quantity %>" data-product-id="<%= order.orderItems.productId %>" data-product-size="<%= order.orderItems.size %>">
              Return
            </button>
            <button class="btn btn-danger btn-sm cancel-order" data-order-id="<%= order._id %>" data-order-quantity="<%= order.orderItems.quantity %>" data-product-id="<%= order.orderItems.productId %>" data-product-size="<%= order.orderItems.size %>">
              Cancel
            </button>
          </div>
        
        </div>
      </a>
      <% } %>

    <% } else { %>
      <div class="no-orders">
        <h5>No orders found</h5>
        <p>It seems like you haven’t placed any orders yet.</p>
      </div>
    <% } %>
  </div>

</div>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Cancel order logic
    document.querySelectorAll('.cancel-order').forEach(button => {
      button.addEventListener('click', function () {
        event.preventDefault();

        const orderId = this.getAttribute('data-order-id');
        const productId = this.getAttribute('data-product-id');
        const orderQuantity = this.getAttribute('data-order-quantity');
        const orderSize = this.getAttribute('data-product-size');
        Swal.fire({
          title: 'Cancel Order?',
          text: `Are you sure you want to cancel order ID: ${orderId}?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, cancel it!',
        }).then((result) => {
          if (result.isConfirmed) {
            fetch("/cancelOrder", {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ orderId, productId, orderQuantity, orderSize }),
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire('Cancelled!', `Order ${orderId} has been cancelled.`, 'success');
                const statusElement = button.closest('.order-row').querySelector('.status');
                statusElement.textContent = 'Cancelled';
                statusElement.className = 'status Cancelled';
              } else {
                Swal.fire('Sorry!', data.message, 'warning');
              }
            })
            .catch(error => {
              console.error(error.message);
              Swal.fire('Error!', 'There was a problem cancelling your order. Please try again.', 'error');
            });
          }
        });
      });
    });

    //return order
    document.querySelectorAll('.return-order').forEach(button => {
      button.addEventListener('click', function () {
        event.preventDefault();

        const orderId = this.getAttribute('data-order-id');
        const productId = this.getAttribute('data-product-id');
        const orderQuantity = this.getAttribute('data-order-quantity');
        const orderSize = this.getAttribute('data-product-size');
        Swal.fire({
          title: 'Return Order?',
          text: `Are you sure you want to Return order ID: ${orderId}?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, Return it!',
        }).then((result) => {
          if (result.isConfirmed) {
            fetch("/returnOrder", {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ orderId, productId, orderQuantity, orderSize }),
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire('Returned!', `Order ${orderId} has been Returned.`, 'success');
                const statusElement = button.closest('.order-row').querySelector('.status');
                statusElement.textContent = 'Returned';
                statusElement.className = 'status Returned';
              } else {
                Swal.fire('Sorry!', data.message, 'warning');
              }
            })
            .catch(error => {
              console.error(error.message);
              Swal.fire('Error!', 'There was a problem Returning your order. Please try again.', 'error');
            });
          }
        });
      });
    });

  });
</script>
<%- include('../../views/partials/user/footer') %>
