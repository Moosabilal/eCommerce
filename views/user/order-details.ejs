
<%- include('../../views/partials/user/header') %>
<%- include('../../views/partials/user/profile-sidebar') %>

<style>
   .main-content {
    background-color: rgb(230, 244, 230);
    margin-left: 16.4%;
    padding: 40px 30px;
    margin-top: 0px;
    border-radius: 8px;
  }
  .order-container {
    margin: 2rem auto;
    max-width: 90%;
  }

  .order-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  margin-bottom: 1rem;
  background-color: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.order-row-left {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.details {
  flex: 1;
  margin-left: 1rem;
}

  .order-row .details {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
    margin-left: 1rem;
  }

  .order-row h5 {
    margin: 0;
    color: #333;
    font-size: 1rem;
  }

  .order-row p {
    margin: 0;
    font-size: 0.9rem;
    color: #555;
  }

  .priceDetails {
  flex: 1;
  margin-left: 1rem;
}



  .order-row .actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-end;
  }

  .order-row .status {
    font-weight: bold;
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    color: #fff;
  }
  .status {
  font-weight: bold;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  color: #fff;
}

  .status.Pending {
    background-color: #ffc107;
  }

  .status.Processing {
    background-color: #17a2b8;
  }

  .status.Shipped {
    background-color: #007bff;
  }

  .status.Delivered {
    background-color: #28a745;
  }

  .status.Cancelled {
    background-color: #dc3545;
  }

  .status.Return_Requested {
  background-color: #ffc107;
}

  .status.Returned {
    background-color: #6c757d;
  }
  .status.Completed {
    background-color: #28a745;
  }
  div.priceDetails{
    margin-right: 25%;
  }
  @media (max-width: 768px) {
    .main-content {
      margin-left: 0;
      padding: 20px;
    }
  }
</style>

<div class="main-content">
  <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg" style="margin-left: 10%;">
    <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
      Home
      <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
    </a>
    <span class="stext-109 cl4">
      My Orders
    </span>
  </div>

  <h2 class="text-center mb-4">Order Management</h2>

  <div class="order-container">
    <% if (orders && orders.length > 0) { %>
      <% 
        const ordersGrouped = {};
        orders.forEach(order => {
          if (!ordersGrouped[order._id]) {
            ordersGrouped[order._id] = [];
          }
          ordersGrouped[order._id].push(order);
        });
      %>
      
      <% for (const orderId in ordersGrouped) { 
        const orderGroup = ordersGrouped[orderId]; 
        const order = orderGroup[0]; // Assuming all items have the same orderId
      %>
        <div class="order-row">
          <div class="col-md-5">
            <% orderGroup.forEach(product => { %>
              <a href="/orderedProducts?parentAddressId=<%= order.parentAddressId %>&orderId=<%=order._id%>" style="text-decoration: none;">

              <div class="row align-items-center mb-4"> 
                <div class="col-md-4 text-center">
                  <img src="uploads/product-images/<%= product.productDetails.productImage[0] %>" 
                       alt="Product Image" 
                       class="img-fluid rounded" 
                       style="max-width: 100px;">
                </div>
                <div class="col-md-3" style="width: 60%;">
                  <p class="mb-1"><strong>Product Name:</strong> <%= product.productDetails.productName %></p>
                  <p class="mb-1"><strong>Price:</strong> ₹<%= product.orderItems.price %></p>
                  <p class="mb-1"><strong>Quantity:</strong> <%= product.orderItems.quantity %></p>
                  <p class="mb-1"><strong>Total:</strong> <span class="text-primary">₹<%= product.orderItems.totalPrice %></span></p>
                </div>
              </div>
            </a>
            <% }); %>
          </div>
          
  
          <!-- Order Info Section -->
          <div class="col-md-4 details" style="width: 20%;">
            <h5>Order ID: <span class="text-primary"><%= order.orderId %></span></h5>
            <p><strong>finalAmount:</strong> <span class="text-primary">₹<%= order.finalAmount %></span></p>
            <p><strong>Address Type:</strong>
              <% if(addressData){ %>
                <% addressData.forEach(address => { %>
                  <% if (address.address._id.toString() === order.parentAddressId.toString()) { %>
                    <%= address.address.addressType %>
                  <% } %>
                <% }); %>
              <% } else { %>
                <p>No Data Found</p>
              <% } %>
            </p>
            <p><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' }) %></p>
            <% if(order.paymentStatus!=='Completed' && order.status!=='Cancelled' && order.status!=='Returned' && order.status !== 'Return_Requested') { %>
              <button class="btn btn-primary w-50" onclick="payRazorpayAmount('<%= order.razorpay_order_id %>')">Pay Now</button>
            <% }else { %>
              <p> </p>
              <% } %>

          </div>
  
          <!-- Status and Actions Section -->
          <div class="col-md-3 justify-content-left" style="display: flex; flex-direction: column; gap: 10px;">
            <div class="details">
              <p><strong>Status :&nbsp;</strong><span class="status <%= order.status %> m-l-17"><%= order.status %></span></p>
              <p><strong>Payment :&nbsp;</strong><span class="status <%= order.paymentStatus %>"><%= order.paymentStatus %></span></p>
            </div>
            <div class="actions" style="display: flex; flex-direction: row; gap: 10px;">
              <% if(order.status === 'Delivered'){ %>
              <button class="btn btn-danger btn-sm return-order" data-order-id="<%= order._id %>" data-order-quantity="<%= order.orderItems.quantity %>" data-product-id="<%= order.orderItems.productId %>" data-product-size="<%= order.orderItems.size %>">
                Return
              </button>
              <% } %>
              <% if(order.status === 'Pending' || order.status === 'Processing') { %>
              <button class="btn btn-danger btn-sm cancel-order" data-order-id="<%= order._id %>" data-order-quantity="<%= order.orderItems.quantity %>" data-product-id="<%= order.orderItems.productId %>" data-product-size="<%= order.orderItems.size %>">
                Cancel
              </button>
              <% } %>
            </div>
          </div>
        </div>
      <% } %>
    <% } else { %>
      <div class="no-orders">
        <h5>No orders found</h5>
        <p>It seems like you haven’t placed any orders yet.</p>
      </div>
    <% } %>
  </div>

</div>
<%- include('../../views/partials/user/footer') %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>



<script>
// document.addEventListener('DOMContentLoaded', function () {
//     // Cancel order logic
//     document.querySelectorAll('.cancel-order').forEach(button => {
//       button.addEventListener('click', function () {
//         event.preventDefault();

//         const orderId = this.getAttribute('data-order-id');
//         const productId = this.getAttribute('data-product-id');
//         const orderQuantity = this.getAttribute('data-order-quantity');
//         const orderSize = this.getAttribute('data-product-size');
//         Swal.fire({
//           title: 'Cancel Order?',
//           text: `Are you sure you want to cancel order ID: ${orderId}?`,
//           icon: 'warning',
//           showCancelButton: true,
//           confirmButtonColor: '#d33',
//           cancelButtonColor: '#3085d6',
//           confirmButtonText: 'Yes, cancel it!',
//         }).then((result) => {
//           if (result.isConfirmed) {
//             fetch("/cancelOrder", {
//               method: 'POST',
//               headers: {
//                 'Content-Type': 'application/json',
//               },
//               body: JSON.stringify({ orderId, productId, orderQuantity, orderSize }),
//             })
//             .then(response => response.json())
//             .then(data => {
//               if (data.success) {
//                 Swal.fire('Cancelled!', `Order ${orderId} has been cancelled.`, 'success');
//                 const statusElement = button.closest('.order-row').querySelector('.status');
//                 statusElement.textContent = 'Cancelled';
//                 statusElement.className = 'status Cancelled';
//                 window.location.reload();
//               } else {
//                 Swal.fire('Sorry!', data.message, 'warning');
//               }
//             })
//             .catch(error => {
//               console.error(error.message);
//               Swal.fire('Error!', 'There was a problem cancelling your order. Please try again.', 'error');
//             });
//           }
//         });
//       });
//     });

//     //return order
//     document.querySelectorAll('.return-order').forEach(button => {
//       button.addEventListener('click', function () {
//         event.preventDefault();

//         const orderId = this.getAttribute('data-order-id');
//         const productId = this.getAttribute('data-product-id');
//         const orderQuantity = this.getAttribute('data-order-quantity');
//         const orderSize = this.getAttribute('data-product-size');
//         Swal.fire({
//           title: 'Return Order?',
//           text: `Are you sure you want to Return order ID: ${orderId}?`,
//           icon: 'warning',
//           showCancelButton: true,
//           confirmButtonColor: '#d33',
//           cancelButtonColor: '#3085d6',
//           confirmButtonText: 'Yes, Return it!',
//         }).then((result) => {
//           if (result.isConfirmed) {
//             fetch("/returnOrder", {
//               method: 'POST',
//               headers: {
//                 'Content-Type': 'application/json',
//               },
//               body: JSON.stringify({ orderId, productId, orderQuantity, orderSize }),
//             })
//             .then(response => response.json())
//             .then(data => {
//               if (data.success) {
//                 Swal.fire('Returned!', `Order ${orderId} has been Returned.`, 'success');
//                 const statusElement = button.closest('.order-row').querySelector('.status');
//                 statusElement.textContent = 'Returned';
//                 statusElement.className = 'status Returned';
//               } else {
//                 Swal.fire('Sorry!', data.message, 'warning');
//               }
//             })
//             .catch(error => {
//               console.error(error.message);
//               Swal.fire('Error!', 'There was a problem Returning your order. Please try again.', 'error');
//             });
//           }
//         });
//       });
//     });

//   });


document.addEventListener('DOMContentLoaded', function () {
  document.querySelectorAll('.cancel-order, .return-order').forEach(button => {
    button.addEventListener('click', function (event) {
      event.preventDefault();

      const orderId = this.getAttribute('data-order-id');
      const action = this.classList.contains('cancel-order') ? 'cancel' : 'return';
      const confirmText = action === 'cancel' ? 'Cancel Order?' : 'Return Order?';
      const successText = action === 'cancel' ? 'Order Cancelled' : 'Order Return Request Sent';

      Swal.fire({
        title: confirmText,
        text: `Are you sure you want to ${action} order ID: ${orderId}?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: `Yes, ${action} it!`,
      }).then((result) => {
        if (result.isConfirmed) {
          // Show the reason input after confirmation
          Swal.fire({
            title: `${action === 'cancel' ? 'Cancel' : 'Return'} Order Reason`,
            input: 'textarea',
            inputPlaceholder: 'Please enter the reason for the return...',
            showCancelButton: true,
            confirmButtonText: 'Submit',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
              if (!value) {
                return 'You need to provide a reason!';
              }
            }
          }).then((reasonResult) => {
            if (reasonResult.isConfirmed) {
              const reason = reasonResult.value;
              const productId = this.getAttribute('data-product-id');
              const orderQuantity = this.getAttribute('data-order-quantity');
              const orderSize = this.getAttribute('data-product-size');

              // Send the order data along with the return reason to the backend
              fetch(`/${action}Order`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  orderId, productId, orderQuantity, orderSize, reason
                }),
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  console.log('data',data)
                  Swal.fire(successText, `Order ${orderId} has been ${action}ed. Reason: ${reason}`, 'success');
                  console.log('return request',data.returnStatus)
                  // Update status in the UI
                  const orderRow = button.closest('.order-row');
                  const statusElement = orderRow.querySelector('.status');
                  if (action === 'cancel') {
                    statusElement.textContent = 'Cancelled';
                    statusElement.className = 'status Cancelled';
                    const payNowButton = orderRow.querySelector('button.btn-primary');
                  if (payNowButton) {
                    payNowButton.remove();
                  }
                  } else {
                    statusElement.textContent = data.returnStatus; 
                    statusElement.className = `status ${statusElement.textContent}`;
                    const returnButton = orderRow.querySelector('.btn.btn-danger.btn-sm.return-order'); // Fixed the selector
                    if (returnButton) {
                      returnButton.remove();
                      }
                      const payNowButton = orderRow.querySelector('button.btn-primary');

                      if (payNowButton) {
                    payNowButton.remove();
                  }
                      
                    
                  }

                  

                } else {
                  Swal.fire('Sorry!', data.message, 'warning');
                }
              })
              .catch(error => {
                console.error(error.message);
                Swal.fire('Error!', 'There was a problem updating your order. Please try again.', 'error');
              });
            }
          });
        }
      });
    });
  });
});



    async function payRazorpayAmount(razorpay_order_id) {
      console.log(razorpay_order_id)
    try {
        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>', 
            order_id: razorpay_order_id,
            name: "Your Store",
            description: "Complete your payment",
            handler: async function (response) {
                console.log("Payment Response:", response);

                const verifyResponse = await fetch('/verify-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature
                    }),
                });

                const result = await verifyResponse.json();

                if (result.success) {
                    Swal.fire({
                        title: "Payment Successful!",
                        text: "Your order has been updated.",
                        icon: "success",
                        timer: 2000
                    }).then(() => {
                        window.location.reload(); // Reload to reflect payment update
                    });
                } else {
                    Swal.fire({
                        title: "Payment Failed!",
                        text: "Verification failed. Please try again.",
                        icon: "error"
                    });
                }
            },
            prefill: {
                email: "customer@example.com",
                contact: "9999999999"
            },
            theme: {
                color: "#3399cc"
            },
            modal: {
                    ondismiss: function () {
                        Swal.fire({
                            title: 'Payment Failed!',
                            text: 'Failed to complete the payment.',
                            icon: 'warning',
                            showConfirmButton: true
                        })
                    }
                }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        console.error("Error in payRazorpayAmount:", error);
        Swal.fire({
            title: "Error!",
            text: "Something went wrong while processing payment.",
            icon: "error"
        });
    }
}


  
</script>


