<%- include('../../views/partials/user/header') %>
<style>
   
    div.card-header {
        background-color: #7c7d7e;
        color: white;
    }
    div.couponCode{
        margin-top: -18%;
    }
    
    @media (max-width: 768px) {
        div.coupon {
            margin-top: 0;
        }
        .size-117 {
    width: 246px;
    height: 45px;
}
div.couponCode{
        margin-top: 0%;
    }
    
    }
</style>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<div class="container my-5">
    <form action="/placeOrder" method="post" id="orderForm">
        <h1 class="text-center mb-4">Checkout</h1>

        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h2 class="h5 mb-0">Customer Information</h2>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12 mb-5 d-flex">
                                <label class="form-label mb-0 mr-2">Name :</label>
                                <span><%= user.name %></span>
                            </div>
                            <div class="col-md-12 mb-5 d-flex">
                                <label class="form-label mb-0 mr-2">Email :</label>
                                <span><%= user.email %></span>
                            </div>
                            <div class="col-md-12 mb-5 d-flex">
                                <label class="form-label mb-0 mr-2">Phone :</label>
                                <span><%= user.phone %></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            


            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h2 class="h5 mb-0">Shipping Address</h2>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <label for="address-select" class="form-label fw-bold">Delivery Address</label>
                            <div class="input-group">
                                <select class="form-select" name="addressId" id="address-select" onchange="displayAddressDetails()">
                                    <% if (userAddress && userAddress.address.length > 0) { %>
                                        <% userAddress.address.forEach((adrs) => { %>
                                            <option
                                                data-id="<%= adrs.id %>"
                                                value="<%= adrs.addressType %>" 
                                                data-name="<%= adrs.name %>"
                                                data-city="<%= adrs.city %>"
                                                data-landmark="<%= adrs.landMark %>"
                                                data-state="<%= adrs.state %>"
                                                data-pincode="<%= adrs.pincode %>"
                                                data-phone="<%= adrs.phone %>"
                                                data-alt-phone="<%= adrs.altPhone %>"
                                            >
                                                <%= adrs.addressType %>
                                            </option>
                                        <% }) %>
                                    <% } else { %>
                                        <option disabled selected>No addresses available</option>
                                    <% } %>
                                </select>
                                <a href="/addAddress"><button class="btn" style="background-color: #7c7d7e;" type="button" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                                    <i class="bi bi-plus-circle"></i> Add New
                                </button></a>
                            </div>
                            <div class="form-text text-muted mt-1">Select an address or add a new one.</div>

                            <div id="address-details" class="mt-4">
                                <div class="card">
                                    <div class="card-header text-white">
                                        <h5 class="card-title mb-0">Selected Address Details</h5>
                                    </div>
                                    <div class="card-body">
                                        <p class="text-muted">Please select an address to see the details.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="couponCode col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h2 class="h5 mb-0">Available Coupons</h2>
                    </div>
                    <div class="card-body">
                        <% if (coupons.length > 0) { %>
                            <ul class="list-group">
                                <% coupons.forEach(coupon => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>Coupon Code &nbsp;:&nbsp; <span class="text-primary"><%= coupon.couponCode %></span> &nbsp;&nbsp;&nbsp; Offer Price &nbsp;:&nbsp;<span class="text-primary"> &#8377;<%= coupon.offerPrice %> off</span></span>
                                    </li>
                                <% }); %>
                            </ul>
                        <% } else { %>
                            <p>No available coupons</p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>


        <div class="row">


                <div class="card">
                    <div class="card-header">
                        <h2 class="h5 mb-0">Enter Coupon Code</h2>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="flex-w flex-sb-m bor15 p-t-18 p-b-15 p-lr-40 p-lr-15-sm">
                                <div class="flex-w flex-m m-r-20 m-tb-5">
                                    <input class="stext-104 cl2 plh4 size-117 bor13 p-lr-20 m-r-10 m-tb-5 text-center" type="text" name="coupon" id="coupon" placeholder="Coupon Code" style="border: 2px solid grey; border-radius: 30px;">
                                        
                                    <div class="flex-c-m stext-101 cl2 size-118 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-5 m-l-200" id="applyCouponButton">
                                        Apply coupon
                                    </div>
                                    <div class="flex-c-m stext-101 cl2 size-118 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-5" id="cancelCouponButton">
                                        Cancel
                                    </div>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

        </div>


        <div class="card mb-4">
            <div class="card-header">
                <h2 class="h5 mb-0">Shipping Method</h2>
            </div>
            <div class="card-body">
                <div class="form-check mb-3">
                    <input class="form-check-input" type="radio" name="shipping" value="standard" id="standard" checked>
                    <label class="form-check-label" for="standard">
                        Standard Shipping (3-5 business days) - &#8377;5
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="shipping" value="express" id="express">
                    <label class="form-check-label" for="express">
                        Express Shipping (1-2 business days) - &#8377;15
                    </label>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h2 class="h5 mb-0">Order Summary</h2>
            </div>
            <div class="card-body">
                <% cart.items.forEach(item => { %>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <img src="uploads/product-images/<%= item.productId.productImage[0]%>" alt="<%= item.productId.productName %>" class="img-fluid" style="width: 100px; height: 120px;">
                        
                        <div>
                            <span><%= item.productId.productName %> (Quantity: <%= item.stock[0].quantity %>)</span>
                        </div>     
                        <span>&#8377;<%= item.totalPrice %></span>
                    </div>
                <% }); %>
            
                <hr style="background-color: black;">
                <div class="d-flex justify-content-between">
                    <span>Subtotal</span>
                    <span >&#8377;<%= totalPrice %></span>
                </div>
                <div class="d-flex justify-content-between">
                    <span>Shipping</span>
                    <span id="shipping-cost">&#8377;5</span>
                </div>
                <div class="d-flex justify-content-between">
                    <span>Discount</span>
                    <p>&#8377;<span id="discount">0</span></p>
                </div>
                <div class="d-flex justify-content-between">
                    <span>Tax</span>
                    <p><span id="tax" value="5">5</span>%</p>
                </div>
                <hr>
                <div class="d-flex justify-content-between fw-bold">
                    <span>Total</span>
                    <span id="total"></span>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-header">
                <h2 class="h5 mb-0">Payment Method</h2>
            </div>
            <div class="card-body">
                <div class="form-check mb-3">
                    <input class="form-check-input" type="radio" name="payment" value="Card" id="Card" checked>
                    <label class="form-check-label" for="Card">Wallet</label>
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="radio" name="payment" value="UPI" id="upi">
                    <label class="form-check-label" for="upi">RazorPay</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="payment" value="COD" id="COD">
                    <label class="form-check-label" for="COD">Cash on Delivery</label>
                </div>
            </div>
        </div>
        <!-- amount check -->
        <input type="hidden" id="razorpay_order_id" name="razorpay_order_id" value="">
        <input type="hidden" id="razorpay_payment_id" name="razorpay_payment_id" value="">
        <input type="hidden" id="razorpay_signature" name="razorpay_signature" value="">
        <input type="hidden" id="paymentStatus" name="paymentStatus" value="Pending">
        <input type="hidden" id="walletBalance" value="<%= wallet.balance %>">
        <input type="hidden" id="parentAddressId" name="parentAddressId" value="<%=userAddress._id%>">
        <input type="hidden" id="finalAmount" name="finalAmount" value="">
        <input type="hidden" name="addressId" id="addressId" value="">
        <input type="hidden" id="subtotal" name="subtotal" value="<%= totalPrice %>">
        <input type="hidden" id="shippingValue" name="shippingValue" value="">
        <input type="hidden" id="discountValue" name="discountValue" value="20">
        <input type="hidden" id="taxValue" name="taxValue" value="5">
        <input type="hidden" id="couponCode" name="couponCode" value="">
        <button class="btn btn-success w-100 py-3" type="button" id="placeOrderButton">Place Order</button>
    </form>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #7c7d7e;">
                <h5 class="modal-title" id="confirmationModalLabel" style="color: white;">Confirm Your Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h5>Order Summary:</h5>
                <p><strong>Subtotal:</strong> &#8377;<span id="confirm-subtotal"></span></p>
                <p><strong>Shipping:</strong> &#8377;<span id="confirm-shipping"></span></p>
                <p><strong>Total:</strong> &#8377;<span id="confirm-total"></span></p>
                <p><strong>Shipping Address:</strong> <span id="confirm-address"></span></p>
                <p><strong>Payment Method:</strong> <span id="confirm-payment"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirm-order">Confirm Order</button>
            </div>
        </div>
    </div>
</div>

<%- include('../../views/partials/user/footer') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function displayAddressDetails() {
        const selectElement = document.getElementById('address-select');
        const selectedOption = selectElement.options[selectElement.selectedIndex];

        const addressId = selectedOption.getAttribute('data-id');
        const name = selectedOption.getAttribute('data-name');
        const city = selectedOption.getAttribute('data-city');
        const landmark = selectedOption.getAttribute('data-landmark');
        const state = selectedOption.getAttribute('data-state');
        const pincode = selectedOption.getAttribute('data-pincode');
        const phone = selectedOption.getAttribute('data-phone');
        const altPhone = selectedOption.getAttribute('data-alt-phone');
        const detailsContainer = document.getElementById('address-details');
        document.getElementById('addressId').value = addressId;

        detailsContainer.innerHTML = `
            <div class="card">
                <div class="card-header text-white">
                    <h5 class="card-title mb-0">Selected Address Details</h5>
                </div>
                <div class="card-body"><br>
                    <p><strong>Name:</strong> ${name}</p>
                    <p><strong>City:</strong> ${city}</p>
                    <p><strong>Landmark:</strong> ${landmark}</p>
                    <p><strong>State:</strong> ${state}</p>
                    <p><strong>Pincode:</strong> <span class="badge bg-secondary">${pincode}</span></p>
                    <p><strong>Phone:</strong> ${phone}</p>
                    <p><strong>Alt Phone:</strong> ${altPhone}</p>
                    <a href="/editAddress?id=${addressId}" class="btn btn-secondary" style="width:20%;">Edit</a>
                </div>
            </div>`;
    }
    document.addEventListener('DOMContentLoaded', displayAddressDetails);

    document.addEventListener('DOMContentLoaded', () => {
        const shippingOptions = document.querySelectorAll('input[name="shipping"]');
        const shippingCostElement = document.getElementById('shipping-cost');
        const totalElement = document.getElementById('total');
        const orderForm = document.getElementById('orderForm');
        const finalAmount = document.getElementById('finalAmount');
        const discount = document.getElementById('discount').textContent.trim();
        const tax = document.getElementById('tax').textContent
        const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));

        const subtotal = parseFloat('<%= totalPrice %>'); 
        const confirmTax = subtotal * (tax / 100);
        function updateShippingCost() {
            const selectedOption = document.querySelector('input[name="shipping"]:checked');
            const shippingCost = selectedOption.value === 'standard' ? 5 : 15;

            shippingCostElement.innerHTML = `&#8377;${shippingCost}`;
            document.getElementById('shipping-cost').value = shippingCost;
            const finalTotal = ((subtotal + shippingCost) - discount) + confirmTax;
            totalElement.innerHTML = `&#8377;${finalTotal}`;
            finalAmount.value = finalTotal;
        }

        shippingOptions.forEach(option => {
            option.addEventListener('change', updateShippingCost);
        });

        updateShippingCost();

        const placeOrderButton = document.getElementById('placeOrderButton');

        placeOrderButton.addEventListener('click', (e) => {
            e.preventDefault(); 

            const selectedShippingOption = document.querySelector('input[name="shipping"]:checked').nextElementSibling.textContent;
            const selectedPaymentMethod = document.querySelector('input[name="payment"]:checked').nextElementSibling.textContent;
            const selectedAddress = document.querySelector('#address-details .card-body').innerText;

            const totalAmountValue = parseFloat(finalAmount.value);
            if(selectedPaymentMethod === 'Cash on Delivery' && totalAmountValue > 1000) {
                Swal.fire({
                    title: 'Order Amount Limit Exceeded!',
                    text: 'Cash on delivery is only available for orders below ₹1000.',
                    icon: 'error',
                    showConfirmButton: true
                });
                return;
            }

            const addressId = document.getElementById('addressId').value;
            if (addressId == '') {
                Swal.fire({
                    icon: 'info',
                    title: 'Please add your address',
                    text: 'You need to add your address to proceed with the order',    
                });
                return;
            }

            document.getElementById('confirm-subtotal').innerText = subtotal;
            document.getElementById('confirm-shipping').innerText = selectedShippingOption.includes('Standard') ? '5' : '15';
            document.getElementById('confirm-total').innerText = totalElement.innerText.replace('₹', '');
            document.getElementById('confirm-address').innerText = selectedAddress || 'No address selected';
            document.getElementById('confirm-payment').innerText = selectedPaymentMethod;

            document.getElementById('shippingValue').value = selectedShippingOption.includes('Standard') ? 5 : 15;
            document.getElementById('addressId').value = addressId;


        var discountElement = document.getElementById('discount');
        var taxElement = document.getElementById('tax');
        var discountInput = document.getElementById('discountValue');
        var taxInput = document.getElementById('taxValue');

        function updateValues() {
            discountInput.value = discountElement.textContent;
            taxInput.value = taxElement.textContent;
        }

        updateValues();
        const balance = parseFloat(document.getElementById('walletBalance').value)
        const totalAmount =parseFloat( finalAmount.value)
            
            if (selectedPaymentMethod == "Wallet") {
                if(balance<=totalAmount){
                Swal.fire({
                    title: 'Payment Failed',
                    text: 'insufficient Amount in your wallet, try with different payment method.',
                    icon: 'error',
                    })
                }else{
                    confirmationModal.show();

                }
            }else{
                confirmationModal.show();


            }
              
            
        });

        document.getElementById('confirm-order').addEventListener('click', async () => {
    const selectedPaymentMethod = document.querySelector('input[name="payment"]:checked').value;
    
    const finalAmount = document.getElementById('finalAmount');
    if (!finalAmount || !finalAmount.value || isNaN(finalAmount.value)) {
        Swal.fire({
            title: 'Invalid Amount!',
            text: 'Please enter a valid amount.',
            icon: 'error',
            showConfirmButton: true
        });
        return;
    }

    if (selectedPaymentMethod === 'UPI') {
        try {
            const response = await fetch('/create-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount: finalAmount.value, currency: 'INR' })
            });

            const data = await response.json();
            if (!data.success) {
                throw new Error('Failed to create Razorpay order.');
            }

            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',  
                amount: data.amount,
                currency: 'INR',
                name: 'Eagle wings',
                description: 'Test Transaction',
                order_id: data.orderId,
                handler: async function (response) {
                    document.getElementById('razorpay_order_id').value = response.razorpay_order_id;
                    document.getElementById('razorpay_payment_id').value = response.razorpay_payment_id;
                    document.getElementById('razorpay_signature').value = response.razorpay_signature;
                    
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature
                        }),
                    });

                    const result = await verifyResponse.json();
                    if (result.success) {
                        Swal.fire({
                            title: 'Payment Successful!',
                            text: 'Your payment has been processed successfully.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            document.getElementById('paymentStatus').value = 'Completed';
                            orderForm.submit();

                        });
                    } else {
                        Swal.fire({
                            title: 'Payment Failed!',
                            text: 'Your payment failed, but your order was placed.',
                            icon: 'error',
                            showConfirmButton: true
                        })
                    }
                },
                prefill: {
                    name: '<%= user.name %>',
                    email: '<%= user.email %>',
                    contact: '<%= user.phone %>',
                },
                theme: { color: '#3399cc' },
                modal: {
                    ondismiss: function () {
                        Swal.fire({
                            title: 'Payment Failed!',
                            text: 'Your payment failed, your order was placed.',
                            icon: 'warning',
                            showConfirmButton: true
                        }).then(() => {
                            document.getElementById('razorpay_order_id').value = data.orderId;
                            document.getElementById('razorpay_payment_id').value =null;
                            document.getElementById('razorpay_signature').value = null;
                            orderForm.submit();
                        });
                    }
                }
            };

            const rzp = new Razorpay(options);
            rzp.open();
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Please try again.',
                icon: 'error',
                showConfirmButton: true
            });
        }
    } else {
        Swal.fire({
            title: 'Order Placed Successfully!',
            text: 'Your order has been placed successfully.',
            icon: 'success',
            showConfirmButton: false,
            timer: 1500
        }).then(() => {
            orderForm.submit();
        });
    }
});



    });
    


   document.getElementById('applyCouponButton').addEventListener('click', () => {
                                        const couponCode = document.getElementById('coupon').value;
                                        fetch('/applyCoupon', {
                                            method: 'put',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ coupon: couponCode })
                                        })
                                        .then(response => response.json())
                                        .then(data => {
                                            if (data.success) {
                                                Swal.fire({
                                                    title: 'Coupon Applied!',
                                                    text: `Discount: ₹${data.discount}`,
                                                    icon: 'success',
                                                    showConfirmButton: false,
                                                    timer: 1500
                                                });
                                                document.getElementById('discount').textContent = data.discount;
                                                updateShippingCost();
                                            } else {
                                                Swal.fire({
                                                    title: 'Invalid Coupon',
                                                    text: data.message || 'The coupon code you entered is invalid.',
                                                    icon: 'error',
                                                    showConfirmButton: true
                                                });
                                            }
                                        });
                                    });


                                    document.getElementById('cancelCouponButton').addEventListener('click', () => {
                                    const couponCode = document.getElementById('coupon').value;
                                    fetch('/cancelCoupon', {
                                        method: 'put',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({ coupon: couponCode })
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            Swal.fire({
                                                title: 'Coupon Cancelled!',
                                                text: 'The coupon has been successfully cancelled.',
                                                icon: 'success',
                                                showConfirmButton: false,
                                                timer: 1500
                                            });
                                            document.getElementById('discount').textContent = '0';
                                            updateShippingCost();
                                        } else {
                                            Swal.fire({
                                                title: 'Failed to Cancel Coupon',
                                                text: data.message || 'There was an issue cancelling the coupon. Please try again.',
                                                icon: 'error',
                                                showConfirmButton: true
                                            });
                                        }
                                    });
                                });
</script>
