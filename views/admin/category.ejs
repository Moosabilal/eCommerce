<%-include('../../views/partials/admin/header') %>

<div class="content">
  <h3>Category</h3>

  <!-- Search Bar Form -->
  <form method="GET" action="/admin/category">
    <div class="form-group d-flex">
      <input 
        type="text" 
        name="search" 
        class="form-control" 
        placeholder="Search for Category..." 
        value=""
      >
      <button type="submit" class="btn btn-primary ml-2">Search</button>
    </div>
  </form>
  
  <!-- Add Category Form -->
  <form method="POST" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
    <div class="form-group">
      <label for="categoryName">Category Name</label>
      <input type="text" class="form-control" id="product_name" name="name" placeholder="Enter category name" >
      <div id="name-error" class="error-message text-danger" ></div>
    </div>
    
    <div class="form-group">
      <label for="categoryDescription">Description</label>
      <textarea class="form-control" id="descriptionId" name="description" rows="3" placeholder="Enter category description" ></textarea>
      <div id="description-error" class="error-message text-danger"></div>
    </div>
    <button type="submit" class="btn btn-primary">Add Category</button>
  </form>
  
  <hr>

  <!-- Categories Table -->
  <h4>Category List</h4>
  <table class="table table-striped table-bordered">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Offer</th>
        <th>Status</th>
        <th>List/Unlist</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% cat.reverse().forEach((category, index) => { %>
      <tr>
        <td><%= category.name %></td>
        <td><%= category.description %></td>
        <td>
          <% if(category.categoryOffer){ %>
             <p> <%= category.categoryOffer %> %</p>
            <% }else{ %>
              0%
              <% } %>
        </td>
        <td>
          <% if(category.categoryOffer===0){ %>
            <a href="#" onclick="addOffer('<%= category._id %>')" class="text-white"><button class="btn btn-success btn-sm ">Add Offer</button></a>
          <% }else{ %>
            <a href="#" onclick="removeOffer('<%= category._id %>')" class="text-white"><button class="btn btn-danger btn-sm">Remove Offer</button></a>
          <% } %>
        </td>
        <td>
          <% if(category.isListed){ %>
            <span>Listed</span>
          <% }else{ %>
            <span>Unlisted</span>
          <% } %>
        </td>
        <td>
          <% if (category.isListed) { %>
            <a href="/admin/listCategory?id=<%= category._id %>" class="text-white"><button class="btn btn-danger btn-sm">Unlist</button></a>
          <% } else { %>
            <a href="/admin/unlistCategory?id=<%= category._id %>" class="text-white"><button class="btn btn-success btn-sm">List</button></a>
          <% } %>
        </td>
        <td>
          <button class="btn btn-warning btn-sm">Edit</button>
        </td>
      </tr>
      <% }) %>
    </tbody>
  </table>

  <%-include('../../views/partials/admin/pagination') %>
</div>


<script>
  function handleFormSubmit(e) {
    e.preventDefault();
    if (!validateForm()) {
      return;
    }
    const name = document.getElementsByName('name')[0].value.trim();
    const description = document.getElementById('descriptionId').value.trim();

    fetch("/admin/addCategory", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, description }),
    })
      .then((response) => {
        if (!response.ok) {
          return response.json().then((err) => {
            throw new Error(err.error);
          });
        }
        return response.json();
      })
      .then((data) => {
        location.reload();
      })
      .catch((error) => {
        if (error.message === "Category already exists") {
          Swal.fire({
            icon: "error",
            title: "Oops",
            text: "Category already exists",
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Oops",
            text: "An error occurred while adding the category.",
          });
        }
      });
  }

  function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    let isValid = true;

    if (name === "") {
      displayErrorMessage("name-error", "Please enter a name");
      isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
      isValid = false;
    }

    if (description === "") {
      displayErrorMessage("description-error", "Please enter a description");
      isValid = false;
    }
    return isValid;
  }

  function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
  }

  function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
      element.innerText = "";
      element.style.display = "none";
    });
  }



  async function addOffer(categoryId) {
    const {value:amount} = await Swal.fire({
      title:"Offer in percentage",
      input:"number",
      inputLabel:"Percentage",
      inputPlaceholder:"%",
    })
    if(amount){
      try {
        const response = await fetch("/admin/addCategoryOffer",{
          method : "POST",
          headers : {
            "Content-Type":"application/json",
          },
          body:JSON.stringify({
            percentage:amount,
            categoryId:categoryId,
          })
        })

        const data = await response.json();
        if(response.ok && data.status === true){
          Swal.fire(
            "Offer added",
            "The offer has been added",
            "success"
          ).then(()=>{
            location.reload();
          })
        }else{
          Swal.fire("Failed",data.message || "Adding offer failed","error")
        }
      } catch (error) {
        Swal.fire(
          "Error",
          "An error occured while adding the offer",
          "error"
        );
        console.log("Error adding offer",error)
        
      }
    }
    
  }


  async function removeOffer(categoryId) {
    try {
      const response = await fetch("/admin/removeCategoryOffer",{
        method : "POST",
        headers : {
          "Content-Type":"application/json",
        },
        body:JSON.stringify({
          categoryId:categoryId,
        })
      })

      const data = await response.json();

      if(response.ok && data.status === true){
        Swal.fire(
          "Offer removed",
          "the offer has been removed",
          "success"
        ).then(()=>{
          location.reload();
        })
      }else{
        Swal.fire("Failed",data.message || "Removing offer failed","error")
      }
    } catch (error) {
      Swal.fire(
        "Error",
        "An error occured while removing the offer",
        "error",
      );
      console.log("Error removing offer",error)
      
    }
    
  }
</script>


<%-include('../../views/partials/admin/footer') %>